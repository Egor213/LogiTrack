// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/repo.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repo/repo.go -destination=./internal/mocks/repository/mock.go -package=repomocks
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Egor213/LogiTrack/internal/domain"
	repotypes "github.com/Egor213/LogiTrack/internal/repo/repotypes"
	gomock "go.uber.org/mock/gomock"
)

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
	isgomock struct{}
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// GetLogs mocks base method.
func (m *MockLog) GetLogs(ctx context.Context, filter repotypes.LogFilter) ([]domain.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, filter)
	ret0, _ := ret[0].([]domain.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockLogMockRecorder) GetLogs(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockLog)(nil).GetLogs), ctx, filter)
}

// GetStatsByService mocks base method.
func (m *MockLog) GetStatsByService(ctx context.Context, service string, from, to time.Time) (domain.ServiceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsByService", ctx, service, from, to)
	ret0, _ := ret[0].(domain.ServiceStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsByService indicates an expected call of GetStatsByService.
func (mr *MockLogMockRecorder) GetStatsByService(ctx, service, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsByService", reflect.TypeOf((*MockLog)(nil).GetStatsByService), ctx, service, from, to)
}

// SendLog mocks base method.
func (m *MockLog) SendLog(ctx context.Context, logObj *domain.LogEntry) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLog", ctx, logObj)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLog indicates an expected call of SendLog.
func (mr *MockLogMockRecorder) SendLog(ctx, logObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLog", reflect.TypeOf((*MockLog)(nil).SendLog), ctx, logObj)
}
